/*
Copyright (c) 2019 huailiang

# This file is part of neural network impleted with shader

Contact: peng_huailiang@qq.com
*/


#pragma kernel ActiveMain
#pragma kernel BufferMain

#include "libActive.cginc"

AppendStructuredBuffer<int> appendBuffer;
ConsumeStructuredBuffer<int> consumeBuffer;
RWTexture2D<float4> Destination;
float4 Color;

float relu_active(float x, float y, float eplison)
{
   return abs(relu(x) - y) < eplison ? 1 : 0;
}

float sigmod_active(float x, float y, float eplison)
{
   return abs(sigmod(x) - y) < eplison ? 1 : 0;
}

float tanh_active(float x, float y, float eplison)
{
   return abs(tanh(x) - y) < eplison ? 1 : 0;
}

[numthreads(8,8,1)]
void ActiveMain (uint3 id : SV_DispatchThreadID) 
{
   float r = relu_active(id.x - 128.0f, id.y - 128.0f, 1e-2);
   float g = sigmod_active((id.x - 128.0f)/32.0f, id.y/256.0f, 1e-2);
   float b = tanh_active((id.x - 128.0f)/32.0f, (id.y-128.0f)/128.0f, 1e-2);
   Destination[id.xy] = float4(r,g,b,1) * Color; 
}

[numthreads(8,1,1)]
void BufferMain (uint3 id : SV_DispatchThreadID) 
{
   if(id.x==2)
   {
      int value = consumeBuffer.Consume();
      appendBuffer.Append(value);
   }
   if(id.x>2)
   {
      appendBuffer.Append(id.x);
   }
}