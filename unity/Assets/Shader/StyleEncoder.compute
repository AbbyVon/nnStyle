/*
Copyright (c) 2019 huailiang

# This file is part of neural network impleted with shader

contact: peng_huailiang@qq.com
*/

#pragma kernel StyleConv0
#pragma kernel StyleNormal0
#pragma kernel StyleInstance0
#pragma kernel StylePad
#pragma kernel StyleConv1
#pragma kernel StyleNormal1
#pragma kernel StyleInstance1
#pragma kernel StyleConv2
#pragma kernel StyleNormal2
#pragma kernel StyleInstance2
#pragma kernel StyleConv3
#pragma kernel StyleNormal3 
#pragma kernel StyleInstance3 

#include "libEncoder.cginc"

uniform int alpha;
Texture2D<float4> source;
RWStructuredBuffer<float> encoder_inst;
StructuredBuffer<float> encoder_g_e0_bn_offset;
StructuredBuffer<float> encoder_g_e0_bn_scale;
DefineEncoderArg(1)
DefineEncoderArg(2)
DefineEncoderArg(3)
DefineEncodeBuffer(0)
DefineEncodeBuffer(1)
DefineEncodeBuffer(2)
DefineEncodeBuffer(3)


/*
***  formula  o=(w-k+2p)/s+1  ***
encoder construct as:
init  256x256x3->
pad	 	264x264x3->  
conv1	  131x131x32->
conv2		65x65x32->
conv3		  32x32x64
*/

[numthreads(8, 8, 3)]
void StyleConv0(uint3 id : SV_DispatchThreadID)
{
	uint width = 256, depth = 3;
	float4 color = source[uint2(id.x * alpha, alpha * (width - 1 - id.y))];
	float arr[3] = { color.x, color.y, color.z };
	float v = 2 * arr[id.z] - 1;  // (0,1) -> (-1,1)
	int idx = id.y * width * depth + id.x * depth + id.z;
	encoder_inst[idx] = v;
}

[numthreads(3, 64, 1)]
void StyleNormal0(uint3 id : SV_DispatchThreadID) // 256x256x3
{
	uint width = 64, depth = 3, nwidth = 256;
	StdDefineNormal(id, encoder_inst, encoder_conv0_statistic, width);
}

[numthreads(8, 8, 3)]
void StyleInstance0(uint3 id : SV_DispatchThreadID) //id.xy=256 256x256x3
{
	uint width = 256, depth = 3;
	int idx = StdID(id, width, depth);
	float color = encoder_inst[idx];
	float mean = encoder_conv0_statistic[id.z * 2];
	float variance = encoder_conv0_statistic[id.z * 2 + 1];
	float inv = rsqrt(variance + EPSILON);
	float normalized = (color - mean) * inv;
	float scale = encoder_g_e0_bn_scale[id.z];
	float offset = encoder_g_e0_bn_offset[id.z];
	encoder_inst[idx] = scale * normalized + offset;
}

[numthreads(8, 8, 3)]
void StylePad(uint3 id : SV_DispatchThreadID) //id.xy=264 256x256x3->264x264x3
{
	uint pad = 4, width = 256, depth = 3;
	//if (StdCheckRange(id, width + 2 * pad)) return;
	StdPad(id, width, depth, pad)
	encoder_conv0[indx2] = encoder_inst[indx];
}

[numthreads(8,8,1)]
void StyleConv1 (uint3 id : SV_DispatchThreadID) //id.xy=136 264x264x3->131x131x32
{
	uint input = 264, output = 264, depth1 = 3, stride =2;
	uint depth2 = /*StdCheckRange(id, output) ? 0 :*/ 32;
	DefineEncoderConv(id, input, output, depth1, depth2, stride, 1, 0);
}

[numthreads(32, THREAD_Y_32Z, 1)]
void StyleNormal1(uint3 id : SV_DispatchThreadID) //131x131x32
{
	uint width = THREAD_Y_32Z, depth = 32, nwidth = 131;
	StdDefineNormal(id, encoder_conv1, encoder_conv1_statistic, width);
}

[numthreads(8, 8, 4)]
void StyleInstance1(uint3 id : SV_DispatchThreadID) //id.xy=136 131x131x32
{
	uint width = 131, depth = 32;
	if (StdCheckRange(id, width)) return;
	DefineEnInstRelu(id, width, depth, 1);
}

[numthreads(8,8,1)]
void StyleConv2(uint3 id : SV_DispatchThreadID) //id.xy=72 131x131x32->65x65x32 
{
	uint input = 131, output = 65, depth1 = 32, stride = 2;
	uint depth2 = StdCheckRange(id, output) ? 0 : 32;
	DefineEncoderConv(id, input, output, depth1, depth2, stride, 2, 1);
}

[numthreads(32,THREAD_Y_32Z,1)]
void StyleNormal2(uint3 id : SV_DispatchThreadID)  //65x65x32 
{
	uint width = THREAD_Y_32Z, depth = 32, nwidth = 65;
	StdDefineNormal(id, encoder_conv2, encoder_conv2_statistic, width);
}

[numthreads(8,8,4)]
void StyleInstance2(uint3 id : SV_DispatchThreadID) //id.xy=72 65x65x32
{
	uint width = 65, depth = 32;
	if (StdCheckRange(id, width)) return;
	DefineEnInstRelu(id, width, depth, 2);
}

[numthreads(8,8,1)]
void StyleConv3 (uint3 id : SV_DispatchThreadID) //id.xy=32 65x65x32->32x32x64
{
	uint input = 65, output = 32, depth1 = 32, stride =2;
	uint depth2 = StdCheckRange(id, output) ? 0 : 64;
	DefineEncoderConv(id, input, output, depth1, depth2, stride, 3, 2)
}

[numthreads(MAX_THREAD_Z,REV_THREAD_Z,1)]
void StyleNormal3(uint3 id : SV_DispatchThreadID)  // 32x32x64
{
	uint width = REV_THREAD_Z, depth = 64, nwidth = 32;
	StdDefineNormal(id, encoder_conv3, encoder_conv3_statistic, width);
}

[numthreads(8,8,4)]
void StyleInstance3 (uint3 id : SV_DispatchThreadID) //id.xy=32 32x32x64 
{
	uint width = 32, depth = 64;
	//if (StdCheckRange(id, width)) return;
	DefineEnInstRelu(id, width, depth, 3);
}